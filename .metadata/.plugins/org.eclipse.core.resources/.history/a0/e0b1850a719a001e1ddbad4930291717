package co.bel.frontend;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Collections;
import java.util.List;
import java.util.ResourceBundle;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Spinner;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class HomepageController implements Initializable{


	 @FXML
	 private VBox itemsContainer;
		@Override
	    public void initialize(URL location, ResourceBundle resources) {
	        String apiUrl = "http://localhost:8080/ecom1/webapi/item";
	        String jsonResponse = sendGetRequest(apiUrl);

	        if (jsonResponse != null) {
	            // Parse JSON and create UI components for each item
	            // Replace this part with actual JSON parsing logic based on your project structure
	            // Assuming there's a class Item representing each item
	            List<Item> items = parseJsonResponse(jsonResponse);
	            for (Item item : items) {
	                createItemContainer(item);
	            }
	        } else {
	            System.out.println("Failed to fetch JSON response from the API.");
	        }
	    }

	    private String sendGetRequest(String apiUrl) {
	        try {
	            URL url = new URL(apiUrl);
	            HttpURLConnection connection = (HttpURLConnection) url.openConnection();

	            // Set the request method to GET
	            connection.setRequestMethod("GET");

	            // Set timeouts (optional)
	            connection.setConnectTimeout(5000);
	            connection.setReadTimeout(5000);

	            // Get the response code
	            int responseCode = connection.getResponseCode();

	            if (responseCode == HttpURLConnection.HTTP_OK) {
	                // Read the response from the server
	                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
	                StringBuilder response = new StringBuilder();
	                String line;

	                while ((line = reader.readLine()) != null) {
	                    response.append(line);
	                }

	                reader.close();
	                return response.toString();
	            } else {
	                // Handle non-OK response codes
	                System.out.println("GET request failed. Response Code: " + responseCode);
	                return null;
	            }
	        } catch (Exception e) {
	            e.printStackTrace();
	            return null;
	        }
	    }

	    private List<Item> parseJsonResponse(String jsonResponse) {
	        // Replace this part with actual JSON parsing logic based on your project structure
	        // Using Jackson library as an example
	        ObjectMapper objectMapper = new ObjectMapper();
	        try {
	            JsonNode jsonNode = objectMapper.readTree(jsonResponse);
	            return objectMapper.convertValue(jsonNode, new TypeReference<List<Item>>() {});
	        } catch (Exception e) {
	            e.printStackTrace();
	            return Collections.emptyList();
	        }
	    }


	    private void createItemContainer(Item item) {
	        // Create UI components for each item
	        VBox itemContainer = new VBox();
	        itemContainer.setSpacing(5);

	        Spinner<Integer> quantitySpinner = new Spinner<>(1, 10, 1); // Example range and initial value
	        Button addToCartButton = new Button("Add to Cart");

	        // Add item details, spinner, and button to the container
	        // Customize this part based on your actual item structure
	        itemContainer.getChildren().addAll(
	                // Add labels or other UI components to display item details
	                // ...

	                quantitySpinner,
	                addToCartButton
	        );

	        // Add event handlers for the "Add to Cart" button, if needed
	        addToCartButton.setOnAction(event -> {
	            // Handle adding to cart logic
	            System.out.println("Item ID: " + item.getItem_id() + ", Quantity: " + quantitySpinner.getValue());
	        });

	        // Add the item container to the main container
	        itemsContainer.getChildren().add(itemContainer);
	    }
	    
	    @FXML
		private void onOrderMenuClicked(ActionEvent event) {
			try {
				FXMLLoader loader = new FXMLLoader(getClass().getResource("Orderdetails.fxml"));
				Parent root = loader.load();

				// Create a new stage
				Stage stage = new Stage();
				stage.setTitle("Order Details");
				stage.setScene(new Scene(root));

				// Show the stage
				stage.show();

			} catch (IOException e) {
				e.printStackTrace();
				// Handle the exception, e.g., show an error message to the user
				// showAlert("Error", "Failed to load OrderDetails.fxml. Please try again.",
				// AlertType.ERROR);
			}
		}
		
	}


//	

