package co.bel.frontend;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONObject;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.layout.GridPane;
import javafx.scene.text.Text;
import javafx.stage.Stage;


public class OrderController {

	@FXML
    private GridPane orderGridPane;
	
	public static String namew;
	
	 public String getName() {
			MainController hmv = new MainController();
			namew = hmv.getnameString();
			return namew;
		}
	
    @FXML
	private void onOrderMenuClicked(ActionEvent event) {
    	try {
			// Assume you have a method to fetch data from the URL and parse it into a list
			// of CartItems
			List<OrderItem> orderItems = fetchDataFromUrl("http://localhost:8080/ecom1/webapi/order/checkout", getConsumerId());

			FXMLLoader loader = new FXMLLoader(getClass().getResource("Orderdetails.fxml"));
			Parent root = loader.load();

			OrderController controller = loader.getController();
			System.out.println(orderItems);
			controller.displayOrderItems(orderItems);
			Stage stage = new Stage();
			stage.setScene(new Scene(root));
			stage.setTitle("Order Details");
			stage.show();
		} catch (IOException e) {
			System.err.println("Error loading cart_ex.fxml: " + e.getMessage());
			e.printStackTrace();
		}
	}
    
    public void displayOrderItems(List<OrderItem> orderItems) throws IOException {
        int rowIndex = 1; // Start from row 1 as row 0 is for column headers
      
        for (OrderItem ord : orderItems) {
            addTextToGrid(String.valueOf(ord.getOrder_id()), 0, rowIndex);
            addTextToGrid(String.valueOf(ord.getItem_id().getItem_name()), 1, rowIndex);
            addTextToGrid("₹ " + String.valueOf(ord.getQuantity()), 2, rowIndex);
            addTextToGrid("₹ " + String.valueOf(ord.getItem_id().getItem_price()), 3, rowIndex);
            addTextToGrid("₹ " + String.valueOf(ord.getQuantity() * ord.getItem_id().getItem_price()), 4, rowIndex);

            rowIndex++;
        }

        // Calculate overall price and display it
        double overallPrice = orderItems.stream()
                .mapToDouble(item -> item.getQuantity() * item.getItem_id().getItem_price())
                .sum();
        addTextToGrid("Overall Price: ", 2, rowIndex);
        addTextToGrid("₹ " + String.valueOf(overallPrice), 3, rowIndex);
    }

    private void addTextToGrid(String text, int columnIndex, int rowIndex) {
        Text newText = new Text(text);
        newText.wrappingWidthProperty().setValue(100); // Adjust the wrapping width as needed
        orderGridPane.add(newText, columnIndex, rowIndex);
        System.out.println("Text added to GridPane: " + text + ", Column: " + columnIndex + ", Row: " + rowIndex);
    }
    
    
    public int getConsumerId() {
		String apiUrl = "http://localhost:8080/ecom1/webapi/consumer/concon";
		namew = getName();
		String jsonInputString = "{\n" + "    \"phone_no\": \"" + namew + "\"\n" + "}";
		String response = null;
		try {
			response = performPostRequest(apiUrl, jsonInputString);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		int res = Integer.parseInt(response);
		return res;
	}
    
    private String performPostRequest(String apiUrl, String jsonInput) throws IOException {
		URL url = new URL(apiUrl);
		HttpURLConnection connection = (HttpURLConnection) url.openConnection();
		connection.setRequestMethod("POST");
		connection.setRequestProperty("Content-Type", "application/json");
		connection.setDoOutput(true);

		try (DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream())) {
			byte[] input = jsonInput.getBytes(StandardCharsets.UTF_8);
			outputStream.write(input, 0, input.length);
		}

		int responseCode = connection.getResponseCode();

		if (responseCode == HttpURLConnection.HTTP_OK) {
			try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
				StringBuilder response = new StringBuilder();
				String line;

				while ((line = reader.readLine()) != null) {
					response.append(line);
				}

				return response.toString().trim();
			}
		} else {
			System.out.println("Error: " + responseCode);
			throw new IOException("POST request failed. HTTP response code: " + responseCode);
		}
	}
    
    private List<OrderItem> fetchDataFromUrl(String url, int consumerId) {
		List<OrderItem> orderItems = new ArrayList<>();

		try {
			URL apiUrl = new URL(url);
			HttpURLConnection connection = (HttpURLConnection) apiUrl.openConnection();

			// Set the request method to POST
			connection.setRequestMethod("POST");
			connection.setRequestProperty("Content-Type", "application/json");
			connection.setDoOutput(true);

			// Prepare the JSON input string
			String jsonInputString = "{\n" + "    \"consumer_id\": " + consumerId + "\n" + "}";

			// Write the JSON input string to the connection's output stream
			try (OutputStream os = connection.getOutputStream()) {
				byte[] input = jsonInputString.getBytes("utf-8");
				os.write(input, 0, input.length);
			}

			// Get the response code
			int responseCode = connection.getResponseCode();

			// Read the response or error stream
			try (BufferedReader in = new BufferedReader(
					new InputStreamReader(responseCode == HttpURLConnection.HTTP_OK ? connection.getInputStream()
							: connection.getErrorStream()))) {
				StringBuilder response = new StringBuilder();
				String line;

				while ((line = in.readLine()) != null) {
					response.append(line);
				}

				// Print the response for debugging purposes
				System.out.println(response);

				// Parse the JSON response and populate the list of CartItems
				// (You need to implement this parsing logic based on your JSON structure)
				orderItems = parseJsonResponse1(response.toString());
			}

			// Check the response code for success
			if (responseCode != HttpURLConnection.HTTP_OK) {
				System.out.println("POST request failed. Response Code: " + responseCode);
			}

			connection.disconnect();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return orderItems;
	}

	private List<OrderItem> parseJsonResponse1(String jsonResponse) {
		List<OrderItem> orderItems = new ArrayList<>();

		try {
			JSONArray jsonArray = new JSONArray(jsonResponse);

			for (int i = 0; i < jsonArray.length(); i++) {
				JSONObject cartItemJson = jsonArray.getJSONObject(i);

				int cartId = cartItemJson.getInt("cart_id");

				JSONObject consumerJson = cartItemJson.getJSONObject("consumer");
				int consumerId = consumerJson.getInt("consumer_id");
				String consumerName = consumerJson.getString("consumer_name");
				String email = consumerJson.getString("email_id");
				String password = consumerJson.getString("password");
				String phoneNo = consumerJson.getString("phone_no");

				Consumer consumer = new Consumer(consumerId, consumerName, email, password, phoneNo);

				JSONObject itemJson = cartItemJson.getJSONObject("item");
				int itemId = itemJson.getInt("item_id");
				String itemName = itemJson.getString("item_name");
				double itemPrice = itemJson.getDouble("item_price");

				Item item = new Item(itemId, itemName, itemPrice);

				int quantity = cartItemJson.getInt("quantity");

				CartItem cartItem = new CartItem(cartId, consumer, item, quantity);
				cartItems.add(cartItem);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return cartItems;
	}
    
//    // You can add a method to initialise the data
//    public void initializeData(String consumerId, String orderId, String items, String timestamp, String price) {
//        consumerIdLabel.setText(consumerId);
//        orderIdLabel.setText(orderId);
//        itemsLabel.setText(items);
//        timestampLabel.setText(timestamp);
//        priceLabel.setText(price);
//    }
//
//    public void getAccountDetails() {
//        String nameString = co.bel.frontend.MainController.nameString;
//        String apiUrl = "http://localhost:8080/ecom1/webapi/consumer/concon";
//        String jsonInputString = "{\n" + "    \"phone_no\": \"" + nameString + "\",\n" + "}";
//        
//        try {
//            // Make the first POST request
//            String firstResponse = performPostRequest(apiUrl, jsonInputString);
//
//            // Process the first response if needed
//
//            // Make the second POST request
//            String secondResponse = performPostRequest("http://localhost:8080/ecom1/webapi/consumer/getcon", "{\"consumer_id\": 1}");
//
//            // Process the second response
//            Platform.runLater(() -> showAlert("Success", "POST request successful. Response:\n" + secondResponse, AlertType.INFORMATION));
//        } catch (Exception e) {
//            e.printStackTrace();
//            showAlert("Error", "Failed to perform POST request. Please try again.", AlertType.ERROR);
//        }
//    }
//
//    private String performPostRequest(String apiUrl, String jsonInput) throws IOException {
//        URL url = new URL(apiUrl);
//        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
//        connection.setRequestMethod("POST");
//        connection.setRequestProperty("Content-Type", "application/json");
//        connection.setDoOutput(true);
//
//        try (DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream())) {
//            byte[] input = jsonInput.getBytes(StandardCharsets.UTF_8);
//            outputStream.write(input, 0, input.length);
//        }
//
//        int responseCode = connection.getResponseCode();
//
//        if (responseCode == HttpURLConnection.HTTP_OK) {
//            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
//                StringBuilder response = new StringBuilder();
//                String line;
//
//                while ((line = reader.readLine()) != null) {
//                    response.append(line);
//                }
//
//                return response.toString().trim();
//            }
//        } else {
//            System.out.println("Error: " + responseCode);
//            throw new IOException("POST request failed. HTTP response code: " + responseCode);
//        } 
//    }
//
//    private void showAlert(String title, String content, AlertType alertType) {
//        Alert alert = new Alert(alertType);
//        alert.setTitle(title);
//        alert.setHeaderText(null);
//        alert.setContentText(content);
//        alert.showAndWait();
//    }
//
//    @FXML
//    private void onGoBackClicked() {
//        // Implement logic to go back to the homepage or perform other actions
//        // For example, you can close the current stage
//        Stage stage = (Stage) consumerIdLabel.getScene().getWindow();
//        stage.close();
//    }

}
