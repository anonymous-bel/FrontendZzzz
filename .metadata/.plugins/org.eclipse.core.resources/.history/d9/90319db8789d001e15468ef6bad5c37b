package co.bel.frontend;
import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;

import javafx.scene.layout.GridPane;
import javafx.scene.text.Text;
public class CartItemController {

    @FXML
    private GridPane cartGridPane;

    // Other existing methods...

    public void displayCartItems(List<CartItem> cartItems) throws IOException {
        int rowIndex = 1; // Start from row 1 as row 0 is for column headers
      
        for (CartItem cartItem : cartItems) {
            addTextToGrid(cartItem.getItem().getItem_name(), 0, rowIndex);
            addTextToGrid(String.valueOf(cartItem.getQuantity()), 1, rowIndex);
            addTextToGrid("₹ " + String.valueOf(cartItem.getItem().getItem_price()), 2, rowIndex);
            addTextToGrid("₹ " + String.valueOf(cartItem.getQuantity() * cartItem.getItem().getItem_price()), 3, rowIndex);

            rowIndex++;
        }

        // Calculate overall price and display it
        double overallPrice = cartItems.stream()
                .mapToDouble(item -> item.getQuantity() * item.getItem().getItem_price())
                .sum();
        addTextToGrid("Overall Price: ", 2, rowIndex);
        addTextToGrid("₹ " + String.valueOf(overallPrice), 3, rowIndex);
    }

    private void addTextToGrid(String text, int columnIndex, int rowIndex) {
        Text newText = new Text(text);
        newText.wrappingWidthProperty().setValue(100); // Adjust the wrapping width as needed
        cartGridPane.add(newText, columnIndex, rowIndex);
        System.out.println("Text added to GridPane: " + text + ", Column: " + columnIndex + ", Row: " + rowIndex);
    }
    
    @FXML
	private void handleCheckoutClicked(ActionEvent event) throws IOException {
		int consumerId = getConsumerId();

		// API endpoint
		String apiUrl = "http://localhost:8080/ecom1/webapi/order/createorditem";

		// Prepare the JSON input string
		String jsonInputString = "{\n" + "    \"consumerId\": " + consumerId + "\n" + "}";

		// Make the POST request
		try {
			URL url = new URL(apiUrl);
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();

			// Set the request method to POST
			connection.setRequestMethod("POST");
			connection.setRequestProperty("Content-Type", "application/json");
			connection.setDoOutput(true);

			// Write the JSON input string to the connection's output stream
			try (OutputStream os = connection.getOutputStream()) {
				byte[] input = jsonInputString.getBytes("utf-8");
				os.write(input, 0, input.length);
			}

			// Get the response code
			int responseCode = connection.getResponseCode();

			// Read the response
//	        if (responseCode == HttpURLConnection.HTTP_OK) {
//	            try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
//	                StringBuilder response = new StringBuilder();
//	                String line;
//
//	                while ((line = in.readLine()) != null) {
//	                    response.append(line);
//	                }
//					
//	                // Handle the response as needed (print it, parse it, etc.)
			boolean response = false;
			System.out.println(response);
//	            }
//	        } else {
//	            System.out.println("POST request failed. Response Code: " + responseCode);
//	        }

			connection.disconnect();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
    
}
